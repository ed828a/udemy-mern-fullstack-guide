{"version":3,"file":"static/js/672.6f1b8cd4.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.jsx","shared/components/FormElements/Input.jsx","shared/hooks/form-hook.js","shared/util/validators.js","users/pages/Auth.jsx"],"sourcesContent":["import \"./ImageUpload.css\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst ImageUpload = (props) => {\r\n    const filePickerRef = useRef();\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const fileReader = new FileReader(); // FileReader is baked into the browser.\r\n        // onLoad is called when the fileReader finishes parsing a file OR load a new file\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result); // result is an Url from fileReader finished readAsDataURL\r\n        };\r\n        fileReader.readAsDataURL(file); // this create a URL, and store it in result property\r\n    }, [file]);\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n    const pickedHandler = (event) => {\r\n        // console.log(event.target);\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            setFile(event.target.files[0]);\r\n            setIsValid(true);\r\n            pickedFile = event.target.files[0];\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input\r\n                type=\"file\"\r\n                ref={filePickerRef}\r\n                name=\"\"\r\n                id={props.id}\r\n                style={{ display: \"none\" }}\r\n                accept=\".jpg, .jpeg, .png\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && \"center\"}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl ? (\r\n                        <img src={previewUrl} alt=\"Preview\" />\r\n                    ) : (\r\n                        <p>Please pick an image</p>\r\n                    )}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>\r\n                    Pick Image\r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import \"./Input.css\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../../util/validators\";\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators),\r\n            };\r\n        case \"TOUCH\": {\r\n            return {\r\n                ...state,\r\n                isTouched: true,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = (props) => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: props.initialValue || \"\",\r\n        isValid: props.initialValid || false,\r\n        isTouched: false,\r\n    });\r\n    // useReducer allows you to manage state in a component and also\r\n    // give you a function that you can call which updates the state and re-render the component accordingly.\r\n    // the defference to useState is that with useReducer, you can manage more complex state with ease.\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid);\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = (event) => {\r\n        dispatch({\r\n            type: \"CHANGE\",\r\n            val: event.target.value,\r\n            validators: props.validators,\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({ type: \"TOUCH\" });\r\n    };\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler} // call when the input is focused/clicked\r\n                value={inputState.value}\r\n            />\r\n        ) : (\r\n            <textarea\r\n                id={props.id}\r\n                rows={props.rows || 3}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        );\r\n    // console.log(\"!inputState.isValid\", !inputState.isValid);\r\n    // console.log(\"inputState.isTouched\", inputState.isTouched);\r\n    // console.log(\r\n    //     \"!inputState.isValid && inputState.isTouched\",\r\n    //     !inputState.isValid && inputState.isTouched\r\n    // );\r\n    return (\r\n        <div\r\n            className={`form-control ${\r\n                !inputState.isValid &&\r\n                inputState.isTouched &&\r\n                \"form-control--invalid\"\r\n            }`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && (\r\n                <p>{props.errorText}</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"INPUT_CHANGE\":\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (!state.inputs[inputId]) {\r\n                    continue;\r\n                }\r\n\r\n                // console.log(\"inputId\", inputId);\r\n                // console.log(\"state\", state);\r\n\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            const newState = {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: {\r\n                        value: action.value,\r\n                        isValid: action.isValid,\r\n                    },\r\n                },\r\n                isValid: formIsValid,\r\n            };\r\n\r\n            // console.log(\"newState\", newState);\r\n            return newState;\r\n\r\n        case \"SET_DATA\":\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    // react makes sure that dispatch isn't changed in re-fresh, you don't need to add it to effect dependencies.\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity,\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: \"INPUT_CHANGE\",\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id,\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: \"SET_DATA\",\r\n            inputs: inputData,\r\n            formIsValid: formValidity,\r\n        });\r\n    }, []);\r\n\r\n    // console.log(\"formState\", formState);\r\n    return [formState, inputHandler, setFormData];\r\n};\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    // console.log(\"validators\", validators);\r\n\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};\r\n","import \"./Auth.css\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport {\r\n    VALIDATOR_EMAIL,\r\n    VALIDATOR_MAXLENGTH,\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nconst initialInputs = {\r\n    email: {\r\n        value: \"\",\r\n        isValid: false,\r\n    },\r\n    password: {\r\n        value: \"\",\r\n        isValid: false,\r\n    },\r\n};\r\n\r\nconst Auth = () => {\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        initialInputs,\r\n        false\r\n    );\r\n    const [isLoginMode, setIsLoginMode] = useState(true);\r\n\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n    const auth = useContext(AuthContext);\r\n\r\n    console.log(\"error\", error);\r\n\r\n    const authSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        console.log(\"Auth...\");\r\n        console.log(formState.inputs);\r\n        try {\r\n            let responseData;\r\n            if (isLoginMode) {\r\n                responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/users/login`,\r\n                    \"POST\", // method\r\n                    JSON.stringify({\r\n                        email: formState.inputs.email.value,\r\n                        password: formState.inputs.password.value,\r\n                    }), //body\r\n                    {\r\n                        \"Content-Type\": \"application/json\",\r\n                    } // headers\r\n                );\r\n            } else {\r\n                // FormData is a built-in browser API. in FormData, you can add both text data and file/binary data\r\n                const formData = new FormData();\r\n                formData.append(\"email\", formState.inputs.email.value);\r\n                formData.append(\"password\", formState.inputs.password.value);\r\n                formData.append(\"name\", formState.inputs.name.value);\r\n                formData.append(\"image\", formState.inputs.image.value);\r\n\r\n                responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\r\n                    \"POST\",\r\n                    formData // fetch will automatically set proper headers for formdata\r\n                );\r\n            }\r\n\r\n            console.log(responseData);\r\n\r\n            auth.login(responseData?.user?.id, responseData.token);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    const switchModeHandler = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (!isLoginMode) {\r\n            // sign up\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: undefined,\r\n                    image: undefined,\r\n                },\r\n                formState.inputs.email.isValid &&\r\n                    formState.inputs.password.isValid\r\n            );\r\n        } else {\r\n            // log in\r\n            setFormData(\r\n                {\r\n                    ...formState.inputs,\r\n                    name: {\r\n                        value: \"\",\r\n                        isValid: false,\r\n                    },\r\n                    image: {\r\n                        value: null,\r\n                        isValid: false,\r\n                    },\r\n                },\r\n                false\r\n            );\r\n        }\r\n\r\n        setIsLoginMode((prev) => !prev);\r\n        // navigate(\"/signup\");\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            <Card className=\"authentication\" style={{ background: \"white\" }}>\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <h2>{isLoginMode ? \"Login\" : \"Sign up\"} Required</h2>\r\n                <hr />\r\n                <form className=\"\" onSubmit={authSubmitHandler}>\r\n                    {!isLoginMode && (\r\n                        <Input\r\n                            id=\"name\"\r\n                            element=\"input\"\r\n                            type=\"text\"\r\n                            label=\"Your Name\"\r\n                            validators={[\r\n                                VALIDATOR_REQUIRE(),\r\n                                VALIDATOR_MINLENGTH(3),\r\n                            ]}\r\n                            errorText=\"Please enter a valid name (at least 3 charaters long).\"\r\n                            onInput={inputHandler}\r\n                        />\r\n                    )}\r\n                    {!isLoginMode && (\r\n                        <ImageUpload\r\n                            id=\"image\"\r\n                            center\r\n                            onInput={inputHandler}\r\n                            errorText=\"Please provide an image\"\r\n                        />\r\n                    )}\r\n                    <Input\r\n                        id=\"email\"\r\n                        element=\"input\"\r\n                        type=\"email\"\r\n                        label=\"Email\"\r\n                        validators={[VALIDATOR_EMAIL()]}\r\n                        errorText=\"Please enter a valid email.\"\r\n                        onInput={inputHandler}\r\n                    />\r\n                    <Input\r\n                        id=\"password\"\r\n                        element=\"input\"\r\n                        type=\"password\"\r\n                        label=\"Password\"\r\n                        validators={[\r\n                            VALIDATOR_MINLENGTH(5),\r\n                            VALIDATOR_MAXLENGTH(20),\r\n                        ]}\r\n                        errorText=\"Please enter a valid password (between 5 to 20 characters).\"\r\n                        onInput={inputHandler}\r\n                    />\r\n\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        {isLoginMode ? \"Log In\" : \"Sign Up\"}\r\n                    </Button>\r\n                </form>\r\n                <Button inverse onClick={switchModeHandler}>\r\n                    Switch to {isLoginMode ? \"Sign Up\" : \"Log In\"}\r\n                </Button>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","filePickerRef","useRef","useState","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","className","type","ref","name","id","style","display","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","useReducer","initialValue","initialValid","inputState","dispatch","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","formReducer","formIsValid","inputId","inputs","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_MAXLENGTH","VALIDATOR_EMAIL","validator","trim","test","email","password","inputHandler","setFormData","isLoginMode","setIsLoginMode","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","console","log","authSubmitHandler","preventDefault","process","JSON","stringify","responseData","formData","FormData","append","image","login","user","token","ErrorModal","onClear","Card","background","LoadingSpinner","asOverlay","onSubmit","Input","ImageUpload","disabled","inverse","undefined","prev"],"sourceRoot":""}