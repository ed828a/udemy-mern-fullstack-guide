{"version":3,"file":"static/js/204.e9a1689b.chunk.js","mappings":"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","sources":["places/pages/UpdatePlace.jsx","shared/components/FormElements/Input.jsx","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import \"./PlaceForm.css\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport {\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nconst UpdatePlace = () => {\r\n    const { placeId } = useParams();\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const [loadedPlace, setLoadedPlace] = useState();\r\n    const [placeNotFound, setPlaceNotFound] = useState(false);\r\n    const navigate = useNavigate();\r\n    const auth = useContext(AuthContext);\r\n\r\n    const [formState, inputHandler, setFormData] = useForm(\r\n        {\r\n            title: {\r\n                value: null,\r\n                isValid: false,\r\n            },\r\n            description: {\r\n                value: null,\r\n                isValid: false,\r\n            },\r\n        },\r\n        false\r\n    );\r\n\r\n    useEffect(() => {\r\n        const fetchPlaceById = async (pid) => {\r\n            try {\r\n                const responseData = await sendRequest(\r\n                    `${process.env.REACT_APP_BACKEND_URL}/places/${pid}`,\r\n                    \"GET\",\r\n                    null,\r\n                    {\r\n                        \"Content-type\": \"application/json\",\r\n                    }\r\n                );\r\n\r\n                setLoadedPlace(responseData.place);\r\n\r\n                setFormData(\r\n                    {\r\n                        title: {\r\n                            value: responseData.place.title,\r\n                            isValid: true,\r\n                        },\r\n                        description: {\r\n                            value: responseData.place.description,\r\n                            isValid: true,\r\n                        },\r\n                    },\r\n                    true\r\n                );\r\n            } catch (error) {\r\n                console.log(error);\r\n                if (error.code === 404) {\r\n                    setPlaceNotFound(true);\r\n                }\r\n            }\r\n        };\r\n\r\n        fetchPlaceById(placeId);\r\n        console.log(\"called fetchPlaceById\");\r\n    }, [sendRequest, setFormData, placeId]);\r\n\r\n    const placeUpdateSubmitHandler = async (event) => {\r\n        event.preventDefault();\r\n        console.log(formState.inputs);\r\n        try {\r\n            const responseData = await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\r\n                \"PATCH\",\r\n                JSON.stringify({\r\n                    title: formState.inputs.title.value,\r\n                    description: formState.inputs.description.value,\r\n                }),\r\n                {\r\n                    \"Content-Type\": \"application/json\",\r\n                    Authorization: \"Bearer \" + auth.token,\r\n                }\r\n            );\r\n            console.log(responseData);\r\n            navigate(`/${auth.userId}/places`, { push: true });\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    };\r\n\r\n    if (placeNotFound) {\r\n        return (\r\n            <Card style={{ background: \"white\", padding: \"1rem\" }}>\r\n                <h2>Could not found that place</h2>\r\n            </Card>\r\n        );\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n            {!isLoading && loadedPlace && (\r\n                <form\r\n                    className=\"place-form\"\r\n                    onSubmit={placeUpdateSubmitHandler}\r\n                >\r\n                    {isLoading && <LoadingSpinner asOverlay />}\r\n                    <Input\r\n                        id=\"title\"\r\n                        element=\"input\"\r\n                        type=\"text\"\r\n                        label=\"Title\"\r\n                        validators={[VALIDATOR_REQUIRE()]}\r\n                        errorText=\"Please enter a valid title\"\r\n                        onInput={inputHandler}\r\n                        initialValue={formState.inputs.title.value}\r\n                        initialValid={formState.inputs.title.isValid}\r\n                    />\r\n                    <Input\r\n                        id=\"description\"\r\n                        element=\"textarea\"\r\n                        label=\"Description\"\r\n                        validators={[VALIDATOR_MINLENGTH(5)]}\r\n                        errorText=\"Please enter a valid description\"\r\n                        onInput={inputHandler}\r\n                        initialValue={formState.inputs.description.value}\r\n                        initialValid={formState.inputs.description.isValid}\r\n                    />\r\n                    <Button type=\"submit\" disabled={!formState.isValid}>\r\n                        Update Place\r\n                    </Button>\r\n                </form>\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default UpdatePlace;\r\n","import \"./Input.css\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../../util/validators\";\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators),\r\n            };\r\n        case \"TOUCH\": {\r\n            return {\r\n                ...state,\r\n                isTouched: true,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = (props) => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: props.initialValue || \"\",\r\n        isValid: props.initialValid || false,\r\n        isTouched: false,\r\n    });\r\n    // useReducer allows you to manage state in a component and also\r\n    // give you a function that you can call which updates the state and re-render the component accordingly.\r\n    // the defference to useState is that with useReducer, you can manage more complex state with ease.\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid);\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = (event) => {\r\n        dispatch({\r\n            type: \"CHANGE\",\r\n            val: event.target.value,\r\n            validators: props.validators,\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({ type: \"TOUCH\" });\r\n    };\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler} // call when the input is focused/clicked\r\n                value={inputState.value}\r\n            />\r\n        ) : (\r\n            <textarea\r\n                id={props.id}\r\n                rows={props.rows || 3}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        );\r\n    // console.log(\"!inputState.isValid\", !inputState.isValid);\r\n    // console.log(\"inputState.isTouched\", inputState.isTouched);\r\n    // console.log(\r\n    //     \"!inputState.isValid && inputState.isTouched\",\r\n    //     !inputState.isValid && inputState.isTouched\r\n    // );\r\n    return (\r\n        <div\r\n            className={`form-control ${\r\n                !inputState.isValid &&\r\n                inputState.isTouched &&\r\n                \"form-control--invalid\"\r\n            }`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && (\r\n                <p>{props.errorText}</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"INPUT_CHANGE\":\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (!state.inputs[inputId]) {\r\n                    continue;\r\n                }\r\n\r\n                // console.log(\"inputId\", inputId);\r\n                // console.log(\"state\", state);\r\n\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            const newState = {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: {\r\n                        value: action.value,\r\n                        isValid: action.isValid,\r\n                    },\r\n                },\r\n                isValid: formIsValid,\r\n            };\r\n\r\n            // console.log(\"newState\", newState);\r\n            return newState;\r\n\r\n        case \"SET_DATA\":\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    // react makes sure that dispatch isn't changed in re-fresh, you don't need to add it to effect dependencies.\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity,\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: \"INPUT_CHANGE\",\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id,\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: \"SET_DATA\",\r\n            inputs: inputData,\r\n            formIsValid: formValidity,\r\n        });\r\n    }, []);\r\n\r\n    // console.log(\"formState\", formState);\r\n    return [formState, inputHandler, setFormData];\r\n};\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    // console.log(\"validators\", validators);\r\n\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};\r\n"],"names":["placeId","useParams","useHttpClient","isLoading","error","sendRequest","clearError","useState","loadedPlace","setLoadedPlace","placeNotFound","setPlaceNotFound","navigate","useNavigate","auth","useContext","AuthContext","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","fetchPlaceById","pid","process","responseData","place","console","log","code","placeUpdateSubmitHandler","event","preventDefault","inputs","JSON","stringify","Authorization","token","userId","push","style","background","padding","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","disabled","inputReducer","state","action","val","validate","isTouched","props","useReducer","inputState","dispatch","changeHandler","target","touchHandler","placeholder","onChange","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialInputs","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_MAXLENGTH","VALIDATOR_EMAIL","validator","trim","length","test"],"sourceRoot":""}