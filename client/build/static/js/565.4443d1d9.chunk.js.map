{"version":3,"file":"static/js/565.4443d1d9.chunk.js","mappings":"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","sources":["places/pages/NewPlace.jsx","shared/components/FormElements/ImageUpload.jsx","shared/components/FormElements/Input.jsx","shared/hooks/form-hook.js","shared/util/validators.js"],"sourcesContent":["import \"./PlaceForm.css\";\r\nimport React, { useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport {\r\n    VALIDATOR_MINLENGTH,\r\n    VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/validators\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport { useForm } from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nconst initialInputs = {\r\n    title: {\r\n        value: \"\",\r\n        isValid: false,\r\n    },\r\n    description: {\r\n        value: \"\",\r\n        isValid: false,\r\n    },\r\n    address: {\r\n        value: \"\",\r\n        isValid: false,\r\n    },\r\n    image: {\r\n        value: null,\r\n        isValid: false,\r\n    },\r\n};\r\n\r\nconst NewPlace = () => {\r\n    const [formState, inputHandler] = useForm(initialInputs, false);\r\n    const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n    const auth = useContext(AuthContext);\r\n    const navigate = useNavigate();\r\n\r\n    // console.log(\"NewPlace formState\", formState);\r\n\r\n    const submitHandler = async (event) => {\r\n        event.preventDefault();\r\n        // send form data to server\r\n        const formData = new FormData();\r\n        console.log(\"formState.inputs\", formState.inputs);\r\n        formData.append(\"title\", formState.inputs.title.value);\r\n        formData.append(\"description\", formState.inputs.description.value);\r\n        formData.append(\"address\", formState.inputs.address.value);\r\n        // formData.append(\"creator\", auth.userId); // get userId from backend\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        try {\r\n            const responseData = await sendRequest(\r\n                `${process.env.REACT_APP_BACKEND_URL}/places`,\r\n                \"POST\",\r\n                formData,\r\n                {\r\n                    Authorization: \"Bearer \" + auth.token,\r\n                }\r\n            );\r\n            console.log(responseData);\r\n            // redirect the user to a different page.\r\n            // navigate(\"/another-page\", { replace: true });\r\n            navigate(\"/\", { push: true });\r\n        } catch (error) {\r\n            console.log(error.message);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ErrorModal error={error} onClear={clearError} />\r\n\r\n            <form className=\"place-form\" onSubmit={submitHandler}>\r\n                {isLoading && <LoadingSpinner asOverlay />}\r\n                <Input\r\n                    id=\"title\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Title\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please enter a valid title.\"\r\n                    onInput={inputHandler}\r\n                />\r\n\r\n                <Input\r\n                    id=\"description\"\r\n                    element=\"textarea\"\r\n                    label=\"Description\"\r\n                    validators={[VALIDATOR_MINLENGTH(5)]}\r\n                    errorText=\"Please enter a valid desription (at least 5 characters).\"\r\n                    onInput={inputHandler}\r\n                />\r\n                <Input\r\n                    id=\"address\"\r\n                    element=\"input\"\r\n                    type=\"text\"\r\n                    label=\"Address\"\r\n                    validators={[VALIDATOR_REQUIRE()]}\r\n                    errorText=\"Please enter a valid address.\"\r\n                    onInput={inputHandler}\r\n                />\r\n                <ImageUpload\r\n                    id=\"image\"\r\n                    center\r\n                    onInput={inputHandler}\r\n                    errorText=\"Please provide an image\"\r\n                />\r\n                <Button type=\"submit\" disabled={!formState.isValid}>\r\n                    Add Place\r\n                </Button>\r\n            </form>\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default NewPlace;\r\n","import \"./ImageUpload.css\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\n\r\nconst ImageUpload = (props) => {\r\n    const filePickerRef = useRef();\r\n    const [file, setFile] = useState();\r\n    const [previewUrl, setPreviewUrl] = useState();\r\n    const [isValid, setIsValid] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!file) {\r\n            return;\r\n        }\r\n        const fileReader = new FileReader(); // FileReader is baked into the browser.\r\n        // onLoad is called when the fileReader finishes parsing a file OR load a new file\r\n        fileReader.onload = () => {\r\n            setPreviewUrl(fileReader.result); // result is an Url from fileReader finished readAsDataURL\r\n        };\r\n        fileReader.readAsDataURL(file); // this create a URL, and store it in result property\r\n    }, [file]);\r\n\r\n    const pickImageHandler = () => {\r\n        filePickerRef.current.click();\r\n    };\r\n    const pickedHandler = (event) => {\r\n        // console.log(event.target);\r\n        let pickedFile;\r\n        let fileIsValid = isValid;\r\n        if (event.target.files && event.target.files.length === 1) {\r\n            setFile(event.target.files[0]);\r\n            setIsValid(true);\r\n            pickedFile = event.target.files[0];\r\n            fileIsValid = true;\r\n        } else {\r\n            setIsValid(false);\r\n            fileIsValid = false;\r\n        }\r\n        props.onInput(props.id, pickedFile, fileIsValid);\r\n    };\r\n\r\n    return (\r\n        <div className=\"form-control\">\r\n            <input\r\n                type=\"file\"\r\n                ref={filePickerRef}\r\n                name=\"\"\r\n                id={props.id}\r\n                style={{ display: \"none\" }}\r\n                accept=\".jpg, .jpeg, .png\"\r\n                onChange={pickedHandler}\r\n            />\r\n            <div className={`image-upload ${props.center && \"center\"}`}>\r\n                <div className=\"image-upload__preview\">\r\n                    {previewUrl ? (\r\n                        <img src={previewUrl} alt=\"Preview\" />\r\n                    ) : (\r\n                        <p>Please pick an image</p>\r\n                    )}\r\n                </div>\r\n                <Button type=\"button\" onClick={pickImageHandler}>\r\n                    Pick Image\r\n                </Button>\r\n            </div>\r\n            {!isValid && <p>{props.errorText}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import \"./Input.css\";\r\nimport React, { useEffect, useReducer } from \"react\";\r\nimport { validate } from \"../../util/validators\";\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"CHANGE\":\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators),\r\n            };\r\n        case \"TOUCH\": {\r\n            return {\r\n                ...state,\r\n                isTouched: true,\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst Input = (props) => {\r\n    const [inputState, dispatch] = useReducer(inputReducer, {\r\n        value: props.initialValue || \"\",\r\n        isValid: props.initialValid || false,\r\n        isTouched: false,\r\n    });\r\n    // useReducer allows you to manage state in a component and also\r\n    // give you a function that you can call which updates the state and re-render the component accordingly.\r\n    // the defference to useState is that with useReducer, you can manage more complex state with ease.\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid);\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = (event) => {\r\n        dispatch({\r\n            type: \"CHANGE\",\r\n            val: event.target.value,\r\n            validators: props.validators,\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({ type: \"TOUCH\" });\r\n    };\r\n\r\n    const element =\r\n        props.element === \"input\" ? (\r\n            <input\r\n                id={props.id}\r\n                type={props.type}\r\n                placeholder={props.placeholder}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler} // call when the input is focused/clicked\r\n                value={inputState.value}\r\n            />\r\n        ) : (\r\n            <textarea\r\n                id={props.id}\r\n                rows={props.rows || 3}\r\n                onChange={changeHandler}\r\n                onBlur={touchHandler}\r\n                value={inputState.value}\r\n            />\r\n        );\r\n    // console.log(\"!inputState.isValid\", !inputState.isValid);\r\n    // console.log(\"inputState.isTouched\", inputState.isTouched);\r\n    // console.log(\r\n    //     \"!inputState.isValid && inputState.isTouched\",\r\n    //     !inputState.isValid && inputState.isTouched\r\n    // );\r\n    return (\r\n        <div\r\n            className={`form-control ${\r\n                !inputState.isValid &&\r\n                inputState.isTouched &&\r\n                \"form-control--invalid\"\r\n            }`}\r\n        >\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n            {element}\r\n            {!inputState.isValid && inputState.isTouched && (\r\n                <p>{props.errorText}</p>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case \"INPUT_CHANGE\":\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (!state.inputs[inputId]) {\r\n                    continue;\r\n                }\r\n\r\n                // console.log(\"inputId\", inputId);\r\n                // console.log(\"state\", state);\r\n\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n\r\n            const newState = {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId]: {\r\n                        value: action.value,\r\n                        isValid: action.isValid,\r\n                    },\r\n                },\r\n                isValid: formIsValid,\r\n            };\r\n\r\n            // console.log(\"newState\", newState);\r\n            return newState;\r\n\r\n        case \"SET_DATA\":\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    // react makes sure that dispatch isn't changed in re-fresh, you don't need to add it to effect dependencies.\r\n    const [formState, dispatch] = useReducer(formReducer, {\r\n        inputs: initialInputs,\r\n        isValid: initialFormValidity,\r\n    });\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: \"INPUT_CHANGE\",\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id,\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: \"SET_DATA\",\r\n            inputs: inputData,\r\n            formIsValid: formValidity,\r\n        });\r\n    }, []);\r\n\r\n    // console.log(\"formState\", formState);\r\n    return [formState, inputHandler, setFormData];\r\n};\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n    type: VALIDATOR_TYPE_MINLENGTH,\r\n    val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n    type: VALIDATOR_TYPE_MAXLENGTH,\r\n    val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    // console.log(\"validators\", validators);\r\n\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n            isValid = isValid && value.trim().length >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n            isValid = isValid && value.trim().length <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n            isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n        }\r\n    }\r\n    return isValid;\r\n};\r\n"],"names":["initialInputs","title","value","isValid","description","address","image","useForm","formState","inputHandler","useHttpClient","isLoading","error","sendRequest","clearError","auth","useContext","AuthContext","navigate","useNavigate","submitHandler","event","preventDefault","formData","FormData","console","log","inputs","append","process","Authorization","token","responseData","push","message","onClear","className","onSubmit","asOverlay","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","VALIDATOR_MINLENGTH","center","disabled","props","filePickerRef","useRef","useState","file","setFile","previewUrl","setPreviewUrl","setIsValid","useEffect","fileReader","FileReader","onload","result","readAsDataURL","ref","name","style","display","accept","onChange","pickedFile","fileIsValid","target","files","length","src","alt","Button","onClick","current","click","inputReducer","state","action","val","validate","isTouched","useReducer","initialValue","initialValid","inputState","dispatch","changeHandler","touchHandler","placeholder","onBlur","rows","htmlFor","formReducer","formIsValid","inputId","initialFormValidity","useCallback","inputData","formValidity","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_MAXLENGTH","VALIDATOR_EMAIL","validator","trim","test"],"sourceRoot":""}